<!DOCTYPE html>
<html>
<head>
	<title>Dave's Portfolio</title>
	<%= favicon_link_tag '/favicon.ico?v=2'%>
	<%= stylesheet_link_tag    "application", :media => "all"%>
	<%= javascript_include_tag "application" %>
	<%= csrf_meta_tags %>

	<style type="text/css">
	body {
		font-family : arial , sans-serif ;
		color: #333;
		margin: 0 0 0 220px;
		position: relative;
		min-width: 440px;
	}
	h1, h3 {
		margin: 0;
	}
	body, div, nav, section, ul, textarea {
		box-sizing: border-box; -moz-box-sizing: border-box;
	}
	nav.main {
		position: absolute;
		width: 200px;
		left: -210px; top: 10px;
	}
	nav.main h1 {
		background: url(/assets/test-logo.png) 8px 1em no-repeat;
		padding-left: 60px;
		border-bottom: 1px solid #ccc;
	}
	nav.main > * {
		display: block;
		padding: 5px 10px;
	}
	nav.main a {
		color: #333;
		text-decoration: none;
		opacity: 0.9;
	}
	nav.main a:hover {
		opacity: 1;
	}
	nav.main a.selected {
		opacity: 0.5;
		cursor: default;
	}
 	div.main {
 		/*position: absolute;
 		left: 220px;
 		right: 0;
 		overflow-x: hidden;*/
 	}
 	section.main {
		position: relative;
		padding: 10px;
	}
 	#left_top_background {
		position: absolute;
		left: 0;
		right: 0;
		top: 0;
		bottom: 0;
		max-height: 1200px;
		background: url(/assets/desktop2.jpg) repeat-x;
		z-index: -1;
		opacity: 0.45;
	}
	#bottom_repeating_background {
		position: absolute;
		background: url(/assets/desktop2bottom.jpg);
		top: 1200px;
		bottom: 0px;
		width: 100%;
		z-index: -1;
		opacity: 0.43;
	}
	.vmw-waiting {
		opacity: 0.5;
	}
	.spinner {
		background: url(/assets/spinnerLarge.gif) no-repeat;
		width: 60px;
		height: 60px;
		display: none;
		position: absolute;
		z-index: 1;
		opacity: 0.5;
	}
</style>
</head>

<body>
	<nav class="main">
		<h1>Dave's Portfolio</h1>
		<a href="/samples/vmware">vmware</a>
		<a href="/samples/etrade">etrade samples</a>
		<a href="/tweets">ip twitter</a>
		<a href="/samples/uicontrols">modal dialog</a>
		<a href="/webrtc">camera input</a>
		<a href="/foo/charting_demo">svg charts</a>
		<a href="/samples/jquery_plugin">jquery plugin</a>
		<a href="/moviedb">backbone moviedb</a>
		<a href="/samples/ots_way">processing 3d canvas</a>
		<a href="/samples/algos">algorithms</a>
	</nav>

	<div id="left_top_background"></div>
	<div id="bottom_repeating_background"></div>
	<div class="spinner"></div>
	<div class="main">
		<section style="padding:10px"></section>
	</div>
</body>

<script>

var g = window

$.fn.vload = function ( url , fnDone ){
	// returning jqXHR , so no regular chaining
	return this.vjax( url , {
		dataType : 'html'
	}).done ( function ( responseHtml ){
		this .html( responseHtml )
	})
}

$.fn.vjax = function ( url , options ){
	var o = this.o = {}
  	$.extend( o , {
		url : url ,
		type : 'get' , // defaulting
		dataType : 'json' , // expecting from server
		context : this , // jQuery.ajax() option for jqXHR.done/always/...
		beforeSend : function ( jqXHR ){
			// expecting atomic DOM access within this handler
			// last request per DOM element wins
			o.jqXHR && o.jqXHR.abort() // aborting pending if any
			o.jqXHR = jqXHR
			o.context.addClass( 'vmw-waiting' )
			var target = o.context[ 0].getBoundingClientRect()
			var doc = document.documentElement
			var height = Math.min( target.bottom , doc.clientHeight ) -
				Math.max( target.top , 0 )
			var width = Math.min( target.right , doc.clientWidth ) -
				Math.max( target.left , 0 )
			var offset = o.context.offset()
			var top = Math.max( offset.top , document.body.scrollTop )
			var left = Math.max( offset.left , document.body.scrollLeft )
			$( '> .spinner' , document.body ).css ({
				top : top + height/2 - 30 ,
				left : left + width/2 - 30 -
					parseInt( $( document.body ).css( 'margin-left') )

			})
			.show()
		} ,
		complete : function (){
			o.jqXHR = null // resetting handle
			o.context.removeClass( 'vmw-waiting' )
			$( '> .spinner' , document.body ).hide()
		}
	})

	// defaulting for post-put data
	options && options.data && /(post|put)/i .test( options .type ) &&
		$ .extend ( o , {
			contentType : 'application/json' , // sending to server
			processData : false
		})

	// returning jqXHR object , so no regular chaining
	return $.ajax( $.extend ( o , options ) )
} // vjax

String .prototype .f = function (){
	var a = arguments
	return this .replace ( /{(\d+)}/g , function ( m , n ){ 
		return a [ n ]
	})
} // String.prototype.f

function vErrorDialog (
	options_or_string
) {
    var o = {}
	$ .extend (
		o , {
			title : 'Error' ,
			style : 'x'
		} ,
		isContentHtml ( options_or_string ) ? {
			contentHtml : options_or_string
		} : options_or_string
	) // extend
    return vAlertDialog ( o )
} // vErrorDialog

function isContentHtml (
	v
) {
	return typeof v === 'string' || v instanceof $
} // isContentHtml

// more simple than input dialog, no gray footerbar, center buttons at bottom
// https://vdc-stg-app-vip.vmware.com/web/standards/-/alert-dialogs
function vAlertDialog (
	options_or_string // string or object
) {
	var o = {} // a new day
	$ .extend ( o , {
		title : 'Confirm' ,
		style : "info" , // i-info, ?-confirm, !-warn, x-error
		buttons : [
			{
				title : 'Ok',
				callback : function (
					e
				) {
					e .preventDefault (
					)
				} // callback
			} // anon
		] // buttons
	} , isContentHtml ( options_or_string ) ? {
		contentHtml : options_or_string
	} : options_or_string ) // extend

	o .$dialog = $ .vModalDialog (
		$ ( '<table/>' ) .css (
			o .table_css = {
				'border-collapse' : 'collapse' ,
				width : 322 , // like min-width for table since it auto expands
				'max-width' : 496 
			}
		) .append (
			$ ( '<tr style="line-height:1.5em; background-color:#dedede"/>' ) .append ( 
				o .$titlebar = $ ( '<th class="dragHandle" colspan="100"/>' ) .append (
					o .title
				) // titlebar - without icon in alert dialogs, see standards.vmware.com
			) ,
			$ ( '<tr/>' ) .append (
				o .$body_content = $ ( '<td class="vmw-dialog-content"/>' ) .css (
					o .body_content_css = {
						padding : '1em 1em 1em 60px' , // room for background icon
						background : (
							function (
							) {
								return 'white url({0}) no-repeat 15px 15px' .f (
									[
										"images/help32x.png" ,
										"images/warning32x.png" ,
										"assets/error32x.png"
									] [
										o .iconIndex
									] || "assets/info32x.png"
								) // format
							} // anon
						) ( // param
							o .iconIndex = o .style .length === 1 ? (
								'?!x' .indexOf ( o .style )
							) : (
								$ .inArray (
									o .style , [ 'confirm' , 'warn' , 'err' ] 
								) // inArray
							) // iconIndex
						) // background
					} // body_content_css
				) .append (
					o .contentHtml
				) // $body_content
			) , // append tr
			$ ( '<tr/>' ) .append (
				o .$footer = $ ( '<td colspan="100"/>' ) .css (
					{
						'text-align' : 'center' , height : 42 , 'background-color' : 'white'
					}
				) .append (
					$ .map (
						o .buttons , function (
							v
						) {
							return $ ( '<button class="vmw-button"/>' ) .append (
								v .title
							) .one (
								{
									click : function (
										e
									) {
										e .preventDefault (
										)
										v .callback && v .callback .call (
											this , e
										)
										o .$dialog .triggerHandler (
											'close'
										)
									} // click
								} // anon
							) // one
						} // anon
					) // map
				) // append $footer
			) // append tr
		) // append table
	) // vModalDialog
    return o .$dialog
} // vAlertDialog

function isElementInViewport (el) {
    var rect = el.getBoundingClientRect();
    return (
        rect.top >= 0 &&
        rect.left >= 0 &&
        rect.bottom <= $(window).height() &&
	        // or (window.innerHeight || document.documentElement.clientHeight)
        rect.right <= $(window).width()
	        // or (window.innerWidth || document.documentElement.clientWidth)
    );
}

// using body as context, so call function directly
$.vModalDialog = function (	$contentHtml , options ){
	var o = this .o = {}
	$ .extend ( o , {
		$body : $( document.body ) .on ({
			'keyup' : function ( e ){
				if (
					e.keyCode === 27  // 'escape' key ?
				){
					o.$container .triggerHandler (
						'close'
					)
				} // if
			} // keyup
		}) , // on
		$overlay : $( '<div class="overlay"/>' ) .css({
			position: 'absolute' ,
			height: '100%' ,
			width: '100%' ,
			opacity: '0.3' ,
			'z-index': 10 ,
			top: 0 ,
			left: 0 ,
			'background-color': 'black'
		}) ,
		$container : $( '<div class="container"/>' ) .css({
			position : 'absolute' ,
			'z-index' : 100
		}) .one ({
			close : function ( e ){
				o.$overlay .remove ()
				o.$container .triggerHandler ( 'beforeClose' )
				return o.$container .remove ()
			} // close
		}) .on ( 'mousedown' , '.dragHandle' , function ( e ){ // starting drag
			o.pageX0 = e.pageX // relative to doc.body ?
			o.pageY0 = e.pageY
			o.offset0 = o.$container .offset ()
			o.$body .on ({
				'mousemove.dragging' : function ( e	){
					// dragging dialog into right edge will collapse width
					// so stopping when right side hits containing side
					o.$container .offset ({
						top : o.offset0 .top + ( e.pageY - o.pageY0 ) ,
						left : o.offset0 .left + ( e.pageX - o.pageX0 )
					})
				} , // mousemove
				'mouseup.dragging' : function (	e ) {
					o.$body .off ( '.dragging'	)
				} // mouseup
			}) // on body
		}) .on ({
			center : function (){
				var page = o.$body [0] .getBoundingClientRect()
				var $w = $( window )
				var w = Math.min ( $w.width () , page.width )
				var h = Math.min ( $w.height () , page.height )
				return o.$container .css ( o.eMouse ? {
					// with mouse event, try to center button under click
				} : {
					// no mouse event, just center dialog
					top : ( h - o.$container.outerHeight() ) / 2 - page.top,
					left : ( w - page.left - o.$container.outerWidth() ) / 2
				}) // css
			} // center
		}) // on
	} , options ) // extend

	return o.$container .appendTo (
		o.$body .append ( o.$overlay )
	) .end () .append (
		$contentHtml
	) .triggerHandler (
		'center'
	)
} // vModalDialog


var $my_section = $( '> section' , 'div.main' );
var $my_nav = $( 'nav.main').on(
	'click' , '> a' , function ( e ){
		var $a = $( this)
		e.stopPropagation()
		e.preventDefault();
		if ( $a.hasClass( 'selected' ) ){
			// already selected , doing nothing
		} else {
			$my_section.triggerHandler( 'unload')
			$a.siblings( 'a' ).removeClass( 'selected')

			$my_section.vload(
				$a.attr( 'href' )
			).done( function (){
				$a.addClass( 'selected')
			})
		}
	} // click
)

$( 'a[href$="/tweets"]' , $my_nav ).click() // default

</script>

</html>
